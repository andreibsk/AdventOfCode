# EditorConfig is awesome: http://EditorConfig.org

# .NET coding convention settings for EditorConfig:
# https://docs.microsoft.com/en-us/visualstudio/ide/editorconfig-code-style-settings-reference

# top-most EditorConfig file
root = true


[*]
charset = utf-8
indent_style = tab
insert_final_newline = true
trim_trailing_whitespace = true


[*.cs]
# C# Code Style Settings:
# Implicit and explicit types
csharp_style_var_for_built_in_types = false : suggestion
csharp_style_var_when_type_is_apparent = true : suggestion
csharp_style_var_elsewhere = false : suggestion
# Expression-bodied members
csharp_style_expression_bodied_methods = true : none
csharp_style_expression_bodied_constructors = true : none
csharp_style_expression_bodied_operators = true : none
csharp_style_expression_bodied_properties = true : none
csharp_style_expression_bodied_indexers = true : suggestion
csharp_style_expression_bodied_accessors = true : suggestion
# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true : suggestion
csharp_style_pattern_matching_over_as_with_null_check = true : suggestion
# Inlined variable declarations
csharp_style_inlined_variable_declaration = true : suggestion
# Expression-level preferences
csharp_prefer_simple_default_expression = true : suggestion
# "Null" checking preferences
csharp_style_throw_expression = true : suggestion
csharp_style_conditional_delegate_call = true : suggestion
# Code block preferences
csharp_prefer_braces = false : none

# C# Formatting Settings:
# Newline Options
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true
# Indentation Options
csharp_indent_case_contents = true
csharp_indent_switch_labels = true
csharp_indent_labels = no_change
# Spacing Options
csharp_space_after_cast = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_parentheses = false
# Wrapping Options
csharp_preserve_single_line_statements = true
csharp_preserve_single_line_blocks = true


[*.{cs,vb}]
# .NET Code Style Settings:
# "This." and "Me." qualifiers
dotnet_style_qualification_for_field = false : suggestion
dotnet_style_qualification_for_property = false : suggestion
dotnet_style_qualification_for_method = false : suggestion
dotnet_style_qualification_for_event = false : suggestion
# Language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_locals_parameters_members = true : suggestion
dotnet_style_predefined_type_for_member_access = true : suggestion
# Expression-level preferences
dotnet_style_object_initializer = true : suggestion
dotnet_style_collection_initializer = true : suggestion
dotnet_style_explicit_tuple_names = true : suggestion
dotnet_style_coalesce_expression = true : suggestion
dotnet_style_null_propagation = true : suggestion

# .NET Formatting Settings:
# Organize Usings
dotnet_sort_system_directives_first = true

# .NET Naming Conventions:
# Rules:
# Interfaces begin with I and use PascalCase
dotnet_naming_rule.interfaces_i_pascal_case.symbols = interfaces
dotnet_naming_rule.interfaces_i_pascal_case.style = i_pascal_case
dotnet_naming_rule.interfaces_i_pascal_case.severity = suggestion
# Constants use PascalCase
dotnet_naming_rule.c.symbols = constants
dotnet_naming_rule.c.style = pascal_case
dotnet_naming_rule.c.severity = suggestion
# Non-public static fields begin with s_ and use camelCase
dotnet_naming_rule.non_public_static_fields_s__camel_case.symbols = non_public_static_fields
dotnet_naming_rule.non_public_static_fields_s__camel_case.style = s__camel_case
dotnet_naming_rule.non_public_static_fields_s__camel_case.severity = suggestion
# Non-public fields begin with _ and use camelCase
dotnet_naming_rule.non_public_fields___camel_case.symbols = non_public_fields
dotnet_naming_rule.non_public_fields___camel_case.style = __camel_case
dotnet_naming_rule.non_public_fields___camel_case.severity = suggestion
# Async methods end with Async
dotnet_naming_rule.async_methods_pascal_case_async.symbols = async_methods
dotnet_naming_rule.async_methods_pascal_case_async.style = pascal_case_async
dotnet_naming_rule.async_methods_pascal_case_async.severity = suggestion
# Parameters use camelCase
dotnet_naming_rule.parameters_camel_case.symbols = parameters
dotnet_naming_rule.parameters_camel_case.style = camel_case
dotnet_naming_rule.parameters_camel_case.severity = suggestion
# Types and non-field members use PascalCase
dotnet_naming_rule.many_pascal_case.symbols = types, non_field_members
dotnet_naming_rule.many_pascal_case.style = pascal_case
dotnet_naming_rule.many_pascal_case.severity = suggestion

# Symbols:
# interfaces
dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = *
# parameters
dotnet_naming_symbols.parameters.applicable_kinds = parameter
# types
dotnet_naming_symbols.types.applicable_kinds = class, struct, interface, enum, delegate
dotnet_naming_symbols.types.applicable_accessibilities = *
# constants
dotnet_naming_symbols.constants.applicable_kinds = *
dotnet_naming_symbols.constants.applicable_accessibilities = *
dotnet_naming_symbols.constants.required_modifiers = const
# non_field_members
dotnet_naming_symbols.non_field_members.applicable_kinds = property, method, event
dotnet_naming_symbols.non_field_members.applicable_accessibilities = *
# non_public_fields
dotnet_naming_symbols.non_public_fields.applicable_kinds = field
dotnet_naming_symbols.non_public_fields.applicable_accessibilities = internal, friend, private, protected, protected_internal, protected_friend
# non_public_static_fields
dotnet_naming_symbols.non_public_static_fields.applicable_kinds = field
dotnet_naming_symbols.non_public_static_fields.applicable_accessibilities = internal, friend, private, protected, protected_internal, protected_friend
dotnet_naming_symbols.non_public_static_fields.required_modifiers = static
# async_methods
dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

# Styles:
# camel_case
dotnet_naming_style.camel_case.capitalization = camel_case
# __camel_case
dotnet_naming_style.__camel_case.required_prefix = _
dotnet_naming_style.__camel_case.capitalization = camel_case
# s__camel_case
dotnet_naming_style.s__camel_case.required_prefix = s_
dotnet_naming_style.s__camel_case.capitalization = camel_case
# pascal_case
dotnet_naming_style.pascal_case.capitalization = pascal_case
# i_pascal_case
dotnet_naming_style.i_pascal_case.required_prefix = I
dotnet_naming_style.i_pascal_case.capitalization = pascal_case
# pascal_case_async
dotnet_naming_style.pascal_case_async.capitalization = pascal_case
dotnet_naming_style.pascal_case_async.required_suffix = Async
